{
  "post (service call)": {
    "prefix": "post",
    "body": [
      "let params = utilsService.prepareParams(${1:param});",
      "Object.assign(params, { dtType: '${2:load}' });",
      "return mainService.httpPost(params).then(() => {",
      "    return this.${3:search}();",
      "});"
    ],
    "description": "HTTP POST + search"
  },
  "get (service call)": {
    "prefix": "get",
    "body": [
      "return mainService.httpGet({ dtType: '${1}' }).then(data => {",
      "    ${2:this = $.extend(this, data);}",
      "});"
    ],
    "description": "HTTP GET + extend this"
  },
  "$timeout": {
    "prefix": "timeout",
    "body": [
      "$timeout(() => {",
      "    ${1:job}",
      "});"
    ],
    "description": "$timeout wrapper"
  },
  "chain (batch update)": {
    "prefix": "chain",
    "body": [
      "let selected = this.gridOptions.api.getSelectedRows();",
      "if (selected.length == 0)",
      "    return swal('Error!', 'Select one or more lines!', 'error');",
      "let chain = $q.when(true);",
      "let lines = ${1:selected}.map(el => el.line_id);",
      "lines = _.chunk(lines, 50);",
      "lines.map(el => {",
      "    chain = chain.then(() => {",
      "        return this.doUpdateSingle(el);",
      "    });",
      "});",
      "return $q.when(chain).then(() => {",
      "    this.search();",
      "});"
    ],
    "description": "Chained batch update"
  },
  "$watch": {
    "prefix": "watch",
    "body": [
      "scope.$watch(function(scope) {return scope.${1:value}}, function(newVal, oldVal) {",
      "    if (newVal)",
      "        scope.${1:value} = newVal;",
      "});"
    ],
    "description": "scope.$watch"
  },
  "angucomplete-alt": {
    "prefix": "angucomplete",
    "body": [
      "<div angucomplete-alt",
      "    id=\"${1:id}-autocomplete\"",
      "    placeholder=\"Search ${2:pattern}\"",
      "    pause=\"100\"",
      "    selected-object=\"vm.${3:}selected\"",
      "    remote-url=\"./dataHelper.jsp?dtType=${4:Find}&&str=\"",
      "    title-field=\"name\"",
      "    minlength=\"2\"",
      "    input-class=\"form-control form-control-small\"",
      "    match-class=\"highlight\">",
      "</div>"
    ],
    "description": "angucomplete-alt directive"
  },
  "ui.bootstrap modal": {
    "prefix": "ui.modal",
    "body": [
      "var modalInstance = $uibModal.open({",
      "  templateUrl: template || '${1:myModalContent}.html',",
      "  controller: '${2:ModalInstanceCtrl}',",
      "  controllerAs: 'vm',",
      "  resolve: {",
      "    items: function () {",
      "      return this;",
      "    }",
      "  }",
      "});",
      "modalInstance.result.then(function (selectedItem) {",
      "      $scope.selected = selectedItem;",
      "    }, function () {",
      "      $log.info('Modal dismissed at: ' + new Date());",
      "    });",
      ".controller('${2:ModalInstanceCtrl}', function($scope, $uibModalInstance, modalFactory) {",
      "  var self = this;",
      "this.ok = function () {",
      "    $uibModalInstance.close($scope.selected.item);",
      "  };",
      "  this.cancel = function () {",
      "    $uibModalInstance.dismiss('cancel');",
      "  };",
      "});"
    ],
    "description": "ui.bootstrap modal"
  },
  "$http.get": {
    "prefix": "$http.get",
    "body": [
      "let deferred = $q.defer();",
      "params.compCode = this.compCode;",
      "return $http({method: 'get', cache: false, url: './dataHelper.jsp', params: params}).then(",
      "    (data, status, headers, config) => { deferred.resolve(data.data) },",
      "    (data, status, headers, config) => { deferred.reject(status) });",
      "return deferred.promise;"
    ],
    "description": "$http GET with deferred"
  },
  "$http.post": {
    "prefix": "$http.post",
    "body": [
      "let deferred = $q.defer();",
      "params.compCode = this.compCode;",
      "return $http({method: 'post', url: './dataHelper.jsp', data: $.param(params), ",
      "    headers: { \"Content-Type\": \"application/x-www-form-urlencoded\" }}).then(",
      "    (data, status, headers, config) => { deferred.resolve(data.data) },",
      "    (data, status, headers, config) => { deferred.reject(status) });",
      "return deferred.promise;"
    ],
    "description": "$http POST with deferred"
  },
  "ng-controller": {
    "prefix": "ng-controller",
    "body": [
      "angular.module('app').controller('${1:ctrl}',",
      "    [ '$scope', '$filter', '$timeout', '$q', 'dtIntervalService', 'mainService',",
      "        function($scope, $filter, $timeout, $q, dtIntervalService, mainService)",
      "        {",
      "            let self = this;",
      "            let vm = this;",
      "            this.compCode = $('#compCode').val();",
      "            this.pageId = $('#pageId').val();",
      "            this.load = function()",
      "            {",
      "                ${2}",
      "            };",
      "            this.load();",
      "        }",
      "    ]);"
    ],
    "description": "AngularJS controller"
  },
  "Component (AngularJS .component)": {
    "prefix": "Component",
    "body": [
      "class ${1:ComponentCtrl} {",
      "    constructor (errorService, $http, $q) {",
      "        this.errorService = errorService;",
      "        this.$http = $http;",
      "        this.$q = $q;",
      "    }",
      "    httpGet(params)",
      "    {",
      "        var deferred = this.$q.defer();",
      "        params = $.extend(params, {compCode: this.compCode});",
      "        this.$http({ method: 'get', url: './dataHelper.jsp', params: params }).then(",
      "            function success(response) {",
      "                deferred.resolve(response.data);",
      "            },",
      "            function error(response) { this.errorService.processError(response, deferred); });",
      "        return deferred.promise;",
      "    };",
      "    httpPost(params)",
      "    {",
      "        var deferred = this.$q.defer();",
      "        params = $.extend(params, {compCode: this.compCode});",
      "        this.$http({method: 'post', url: './dataHelper.jsp', data: $.param(params),",
      "            headers: { \"Content-Type\": \"application/x-www-form-urlencoded\" }}).then(",
      "                function success(response) { deferred.resolve(response.data); },",
      "                function error(response) { this.errorService.processError(response, deferred); });",
      "        return deferred.promise;",
      "    };",
      "    $onInit ()",
      "    {",
      "        this.httpGet({dtType: '${2:loadComponentData}'}).then((data) => {",
      "            _.assign(this, data);",
      "        });",
      "    };",
      "};",
      "${1:ComponentCtrl}.$inject = ['errorService', '$http', '$q'];",
      "const ${3:MyComponent} = {",
      "    templateUrl: '${4:componentTemplate}.html',",
      "    bindings: {",
      "        search: '&'",
      "    },",
      "    //require: '^parentComponent',",
      "    controller: ${1:ComponentCtrl},",
      "    controllerAs: '$ctrl',",
      "    transclude: true",
      "};",
      "//.component('${5:component}', ${3:MyComponent})"
    ],
    "description": "AngularJS component with controller class"
  }
}
