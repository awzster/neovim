{
  "cmt": {
    "prefix": "cmt",
    "body": [
      "/**",
      " * @author : za | za@e-vision.by",
      " * @description",
      " *     $1",
      " * @return {Object} $2",
      " */"
    ],
    "description": "/** @auth... */"
  },
  "fcmt": {
    "prefix": "fcmt",
    "body": [
      "/* -----------------------------------------",
      "File    : $TM_FILENAME",
      "Author  : za",
      "Contact : za@e-vision.by",
      "Date    : $CURRENT_YEAR-$CURRENT_MONTH-$CURRENT_DATE",
      "Description : $1",
      "$Header: $",
      "----------------------------------------- */"
    ],
    "description": "Full doxygen-style file comment"
  },
  "try": {
    "prefix": "try",
    "body": [
      "try {",
      "\t$1",
      "}",
      "catch (err) { console.warn(`__CURSOR__: ${err}`); }"
    ],
    "description": "try {..} catch {..}"
  },
  "log": {
    "prefix": "log",
    "body": "console.log($1);",
    "description": "console.log"
  },
  "warn": {
    "prefix": "warn",
    "body": "console.warn($1);",
    "description": "console.warn"
  },
  "val": {
    "prefix": "val",
    "body": "$('#$1').val()",
    "description": "jQuery val()"
  },
  "then": {
    "prefix": ".then",
    "body": [".then($1 => {", "\t$2", "});"],
    "description": ".then()"
  },
  "map": {
    "prefix": ".map",
    "body": [".map(el => {", "\t$1", "});"],
    "description": ".map()"
  },
  "filter": {
    "prefix": ".filter",
    "body": ".filter(el => { return el.id == $1; });",
    "description": ".filter()"
  },
  "find": {
    "prefix": ".find",
    "body": ".find(el => { return el.id == $1; });",
    "description": ".find()"
  },
  "some": {
    "prefix": ".some",
    "body": ".some(el => { return el.id == $1; });",
    "description": ".some()"
  },
  "join (array)": {
    "prefix": "join",
    "body": "$1.map(el => el.id).join(',');",
    "description": "array.map().join()"
  },
  "swal-confirm": {
    "prefix": "swal-confirm",
    "body": [
      "return new swal({",
      "    title: 'Confirmarion',",
      "    text: 'Are you sure to $1?',",
      "    icon: 'question',",
      "    showCancelButton: true,",
      "    confirmButtonText: 'OK',",
      "    cancelButtonText: 'Cancel' }).then((value) => {",
      "    if (value.isConfirmed)",
      "    {",
      "        $2",
      "    }",
      "});"
    ],
    "description": "SweetAlert confirm dialog"
  },
  "swal-error": {
    "prefix": "swal-error",
    "body": "return new swal({ title: 'Error!', text: '$1', icon: 'error' });",
    "description": "SweetAlert error"
  },
  "swal-success": {
    "prefix": "swal-success",
    "body": [
      "return new swal({ title: 'Success!', text: '$1', icon: 'success' }).then(() => {",
      "    $2",
      "});"
    ],
    "description": "SweetAlert success"
  },
  "swal-input": {
    "prefix": "swal-input",
    "body": [
      "return new swal({",
      "  title: 'Clone program',",
      "  input: 'text',",
      "  inputLabel: 'Program name',",
      "  icon: 'question',",
      "  showCancelButton: true,",
      "  confirmButtonText: 'OK',",
      "  cancelButtonText: 'Cancel' }).then((value) => {",
      "  if (value.isConfirmed && value.value)",
      "  {",
      "    $1",
      "  }",
      "});"
    ],
    "description": "SweetAlert with input"
  },
  "eslint-disable": {
    "prefix": "eslind-disable",
    "body": ["/* eslint-disable */", "$1", "/* eslint-enable */"],
    "description": "eslint disable block"
  },
  "assign": {
    "prefix": "assign",
    "body": "Object.assign($1, $2);",
    "description": "Object.assign"
  },
  "rendererClick": {
    "prefix": "rendererClick",
    "body": [
      "const $1 = ({ data, value }) =>",
      "{",
      "    return data && !data.isTotal ?",
      "        `<a href=\"javascript:void(0)\" ng-click=\"vm.DlgOpen('\${data.pos}')\">\${value}</a>` : value;",
      "}"
    ],
    "description": "AG-Grid cell renderer with ng-click"
  },
  "rendererHref": {
    "prefix": "rendererHref",
    "body": [
      "const $1 = ({ data, value }) =>",
      "{",
      "    return data && !data.isTotal ?",
      "        `<a href=\"\" target=\"_blank\">\${value}</a>` : value;",
      "}"
    ],
    "description": "AG-Grid cell renderer with href"
  },
  "forOwn": {
    "prefix": "forOwn",
    "body": [
      "_.forOwn(this.$1, (value, key) => {",
      "    if (typeof(value) == 'string')",
      "        $2[key] = value;",
      "});"
    ],
    "description": "Lodash forOwn"
  },
  "params": {
    "prefix": "params",
    "body": [
      "let params = utilsService.prepareParams(this.$1);",
      "Object.assign(params, { dtType: '$2' });"
    ],
    "description": "Prepare params for service call"
  },
  "remapObiect": {
    "prefix": "remapObiect",
    "body": [
      "let keyMap = { $1: 'id', $2: 'name' };",
      "$3 = $3.map(el => _.mapKeys(el, (value, key) => keyMap[key] || key));"
    ],
    "description": "Remap object keys with _.mapKeys"
  },
  "function": {
    "prefix": "function",
    "body": ["this.$1 = ($2) =>", "{", "  $3", "};"],
    "description": "this.function = () => { ... }"
  }
}
